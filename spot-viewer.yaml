AWSTemplateFormatVersion: "2010-09-09"
Description: "Stack to create an EC2 instance for hosting the MV Spot Viewer with On-Demand and Spot visualizations."

Parameters:
  UniquePrefix:
    Type: String
    Description: "A unique prefix for naming resources (e.g., project name or a random string)."

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: "The VPC ID for the EC2 instance."

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: "The Subnet ID for the EC2 instance."

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "The EC2 Key Pair to allow SSH access."

Resources:
  EC2IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "EC2DynamoDBBatchPricingAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                  - logs:*
                  - ec2:*
                  - ssm:GetParameter
                  - pricing:GetProducts
                Resource: "*"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2IAMRole

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for the MV Spot Viewer EC2 instance with HTTP and custom port access."
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5005
          ToPort: 5005
          CidrIp: 0.0.0.0/0

  SpotViewerEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      KeyName: !Ref KeyName
      SubnetId: !Ref SubnetId
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !Sub "{{resolve:ssm:/aws/service/canonical/ubuntu/server/22.04/stable/current/amd64/hvm/ebs-gp2/ami-id}}"
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: 30
            VolumeType: gp3
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt update -y
          apt install -y python3-pip python3.10-venv jq
          mkdir /home/ubuntu/env
          python3 -m venv /home/ubuntu/env
          source /home/ubuntu/env/bin/activate
          export AWS_REGION=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r '.region')
          export UNIQUE_PREFIX=${UniquePrefix}
          pip3 install boto3 flask gunicorn pandas

          # Create directories for the application
          mkdir -p /home/ubuntu/mv-spot-viewer
          cd /home/ubuntu/mv-spot-viewer

          # Save the Flask API code
          cat << 'EOF' > api.py
          from flask import Flask, jsonify
          import boto3
          import json
          import logging
          from decimal import Decimal
          import pandas as pd
          from flask import send_from_directory

          app = Flask(__name__)

          # Boto3 Clients
          dynamodb = boto3.resource('dynamodb', region_name='us-west-2')
          table = dynamodb.Table("jobTracker-${UniquePrefix}")

          # Logger
          logging.basicConfig(level=logging.INFO)


          def fetch_dynamodb_data():
              """Fetch all job data from DynamoDB."""
              return table.scan()["Items"]


          def get_pricing(instance_type, region, price_type="OnDemand"):
              """Fetch pricing information for On-Demand or Spot pricing."""
              region_mapping = {
                  "us-east-1": "US East (N. Virginia)",
                  "us-east-2": "US East (Ohio)",
                  "us-west-1": "US West (N. California)",
                  "us-west-2": "US West (Oregon)"
              }

              if price_type == "Spot":
                  ec2_client = boto3.client('ec2', region_name=region)
                  try:
                      response = ec2_client.describe_spot_price_history(
                          InstanceTypes=[instance_type],
                          ProductDescriptions=["Linux/UNIX"],
                          MaxResults=1
                      )
                      if response.get('SpotPriceHistory'):
                          return float(response['SpotPriceHistory'][0]['SpotPrice'])
                      else:
                          logging.warning(f"No spot price data found for instance_type: {instance_type}, region: {region}")
                          return 0
                  except Exception as e:
                      logging.error(f"Error fetching Spot price: {e}")
                      return 0
              else:  # On-Demand pricing
                  pricing_client = boto3.client('pricing', region_name="us-east-1")
                  try:
                      response = pricing_client.get_products(
                          ServiceCode="AmazonEC2",
                          Filters=[
                              {"Type": "TERM_MATCH", "Field": "instanceType", "Value": instance_type},
                              {"Type": "TERM_MATCH", "Field": "location", "Value": region_mapping.get(region, "")},
                          ]
                      )
                      if response['PriceList']:
                          price_list = json.loads(response['PriceList'][0])
                          price_dimensions = list(price_list['terms']['OnDemand'].values())[0]['priceDimensions']
                          return float(list(price_dimensions.values())[0]['pricePerUnit']['USD'])
                      else:
                          logging.warning(f"No On-Demand pricing data found for instance_type: {instance_type}, region: {region}")
                          return 0
                  except Exception as e:
                      logging.error(f"Error fetching On-Demand pricing: {e}")
                      return 0
          def calculate_metrics(data, region, cost_type):
              """Calculate metrics for jobs based on type (On-Demand or Spot)."""
              metrics = {
                  "NumberOfJobs": len(data),
                  "NumberOfRetries": 0,
                  "TotalRunTime": 0,
                  "JobQueueName": set(),
                  "TotalOnDemandCost": 0,
                  "TotalSpotCost": 0,
                  "EstimatedSavings": 0,
              }
              unique_instances = {}

              # Aggregate job metrics
              for job in data:
                  metrics["NumberOfRetries"] += int(job.get("Attempts", 0))
                  metrics["TotalRunTime"] += int(job.get("RunDurationSeconds", 0))
                  metrics["JobQueueName"].add(job.get("JobQueue", "Unknown"))

                  # Process instance data
                  instance_map = job["InstanceMap"] if isinstance(job["InstanceMap"], dict) else json.loads(job["InstanceMap"])
                  for instance_id, instance_type in instance_map.items():
                      if instance_id not in unique_instances:
                          unique_instances[instance_id] = {"type": instance_type, "longest_time": 0}
                      unique_instances[instance_id]["longest_time"] = max(
                          unique_instances[instance_id]["longest_time"],
                          int(job["RunDurationSeconds"])
                      )

              # Calculate costs
              for instance_id, details in unique_instances.items():
                  instance_type = details["type"]
                  longest_time = details["longest_time"]
                  on_demand_price = get_pricing(instance_type, region, "OnDemand")
                  spot_price = get_pricing(instance_type, region, "Spot")

                  metrics["TotalOnDemandCost"] += on_demand_price * (longest_time / 3600)
                  metrics["TotalSpotCost"] += spot_price * (longest_time / 3600)

              # Calculate savings
              metrics["EstimatedSavings"] = metrics["TotalOnDemandCost"] - metrics["TotalSpotCost"]
              metrics["JobQueueName"] = list(metrics["JobQueueName"])  # Convert set to list for JSON serialization

              return metrics


          def calculate_spot_metrics(data):
              """Calculate Spot metrics with MemVerge enhancements."""
              df = pd.DataFrame(data)
              df["RunDurationSeconds"] = df["RunDurationSeconds"].astype(int)
              df["TotalTimeSaved"] = df["TotalTimeSaved"].fillna("[]")

              # Parse TotalTimeSaved
              df["ParsedTimeSaved"] = df["TotalTimeSaved"].apply(sum_time_saved)

              # Aggregate metrics for each unique instance
              unique_instances = {}
              total_retries = 0
              job_queues = set()

              for _, row in df.iterrows():
                  instance_map = json.loads(row["InstanceMap"]) if isinstance(row["InstanceMap"], str) else row["InstanceMap"]
                  runtime = row["RunDurationSeconds"]
                  time_saved = row["ParsedTimeSaved"]
                  retries = int(row.get("Attempts", 0))
                  total_retries += retries

                  job_queue = row.get("JobQueue", "Unknown")
                  job_queues.add(job_queue)

                  for instance_id, instance_type in instance_map.items():
                      if instance_id not in unique_instances:
                          unique_instances[instance_id] = {"type": instance_type, "total_runtime": 0, "saved_time": 0}
                      unique_instances[instance_id]["total_runtime"] += runtime
                      unique_instances[instance_id]["saved_time"] += time_saved

              # Calculate costs and runtimes
              cost_without_memverge = 0
              cost_with_memverge = 0
              total_runtime_spot = 0
              total_runtime_with_memverge = 0

              for instance_id, details in unique_instances.items():
                  instance_type = details["type"]
                  total_runtime = details["total_runtime"]
                  saved_time = details["saved_time"]

                  spot_price = get_pricing(instance_type, "us-west-2", "Spot")

                  # Calculate runtimes
                  adjusted_runtime = max(total_runtime - saved_time, 0)
                  total_runtime_spot += total_runtime
                  total_runtime_with_memverge += adjusted_runtime

                  # Calculate costs
                  cost_without_memverge += spot_price * (total_runtime / 3600)
                  cost_with_memverge += spot_price * (adjusted_runtime / 3600)

              return {
                  "NumberOfJobs": len(df),
                  "TotalRetries": total_retries,
                  "TotalRunTimeSpot": total_runtime_spot,
                  "TotalTimeWastedSpot": total_runtime_spot - total_runtime_with_memverge,
                  "TotalRunTimeWithMemVergeSpot": total_runtime_with_memverge,
                  "JobQueueName": list(job_queues),
                  "CostWithoutMemVerge": cost_without_memverge,
                  "CostWithMemVerge": cost_with_memverge,
                  "SavingsWithMemVerge": cost_without_memverge - cost_with_memverge,
              }


          def sum_time_saved(time_saved_list):
              """Sum time saved from TotalTimeSaved column."""
              try:
                  # If it's a string, try to parse it as JSON
                  if isinstance(time_saved_list, str):
                      parsed_list = json.loads(time_saved_list)
                      if isinstance(parsed_list, list):
                          return sum(int(item["N"]) for item in parsed_list if isinstance(item, dict) and "N" in item)
                  elif isinstance(time_saved_list, list):
                      return sum(
                          int(item["N"]) if isinstance(item, dict) and "N" in item else int(item)
                          for item in time_saved_list
                          if isinstance(item, (dict, Decimal, int))
                      )
                  elif isinstance(time_saved_list, Decimal):
                      return int(time_saved_list)
                  elif isinstance(time_saved_list, int):
                      return time_saved_list
              except Exception as e:
                  logging.error(f"Unexpected error while summing TotalTimeSaved: {time_saved_list}, Error: {e}")
              return 0

          @app.route('/metrics-on-demand', methods=['GET'])
          def metrics_on_demand():
              """Metrics for On-Demand usage."""
              data = fetch_dynamodb_data()
              metrics = calculate_metrics(data, "us-west-2", "OnDemand")
              return jsonify(metrics)

          @app.route('/metrics-spot', methods=['GET'])
          def metrics_spot():
              """Metrics for Spot usage with MemVerge enhancements."""
              data = fetch_dynamodb_data()
              spot_metrics = calculate_spot_metrics(data)
              return jsonify(spot_metrics)


          @app.route('/<path:filename>')
          def serve_static(filename):
              return send_from_directory('/home/ubuntu/mv-spot-viewer', filename)


          if __name__ == '__main__':
              app.run(host="0.0.0.0", port=5005)
          EOF
          mkdir -p /home/ubuntu/mv-spot-viewer/static
          curl -o /home/ubuntu/mv-spot-viewer/spot.html https://memverge-logo.s3.us-west-2.amazonaws.com/spot.html
          curl -o /home/ubuntu/mv-spot-viewer/on-demand.html https://memverge-logo.s3.us-west-2.amazonaws.com/on-demand.html
          curl -o /home/ubuntu/mv-spot-viewer/static/styles.css https://memverge-logo.s3.us-west-2.amazonaws.com/styles.css
          # Start the API server
          gunicorn -w 4 -b 0.0.0.0:5005 api:app
      Tags:
        - Key: Name
          Value: !Sub "MVSpotViewer-${UniquePrefix}"

Outputs:
  SpotViewerEC2InstanceId:
    Description: "The ID of the EC2 instance hosting MV Spot Viewer"
    Value: !Ref SpotViewerEC2Instance

  PublicIP:
    Description: "The Public IP of the EC2 instance"
    Value: !GetAtt SpotViewerEC2Instance.PublicIp